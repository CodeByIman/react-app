name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # Déclenche le pipeline lors d'un push sur la branche main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # Utilise une machine virtuelle Ubuntu

    steps:
      # Étape 1 : Checkout du code
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Installer les dépendances Node.js
      - name: Install dependencies
        run: npm install

      # Étape 3 : Build du frontend React
      - name: Build application
        run: npm run build

      # Étape 4 : Construire l'image Docker
      - name: Build Docker image
        run: docker build -t imane1452/my-react-app:latest .

      # Étae 5: Se conneter à Docker Hub
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      # Étap  : Pousser limage Docker vers Docker Hub
      - name: Push Docker image
        run: docker push imane1452/my-react-app:latest

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mv kubectl /usr/local/bin/kubectl
          kubectl version --client  # Verify installation
    

      # Étape 7 :onfigurerr   kubectlavec le fchier kubeconfig
      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 --decode > ~/.kube/config
          

          export KUBECONFIG=~/.kube/config
          chmod 600 ~/.kube/config
       # Step 6:Test cluster connection
      - name: Test cluster connection
        run: |
          
          kubectl get nodes
          kubectl config view --minify
          kubectl cluster-info

      # Étape  8 :  Déployer su Kube,rnetes
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s-deployment.yaml
          kubectl apply -f service.yaml
          kubectl rollout status deployment/my-react-app --namespace=resismart-prod --timeout=2m
      # Step 8: Check deployment status
      - name: Check deployment status
        run: |
          kubectl rollout status deployment/my-react-app --timeout=2m