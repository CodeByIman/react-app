name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # Déclenche le pipeline lors d'un push sur la branche main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # Utilise une machine virtuelle Ubuntu

    steps:
      # Étape 1 : Checkout du code
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Installer les dépendances Node.js
      - name: Install dependencies
        run: |
          set -e  # Stop the script if any command fails
          npm install --verbose  # Verbose output to help debug

      # Étape 3 : Build du frontend React
      - name: Build application
        run: |
          set -e
          npm run build --verbose  # Add verbose output for build

      # Étape 4 : Construire l'image Docker
      - name: Build Docker image
        run: |
          set -e
          docker build -t imane1452/my-react-app:latest . --progress=plain  # More detailed Docker build logs

      # Étape 5: Se connecter à Docker Hub
      - name: Login to Docker Hub
        run: |
          set -e
          echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      # Étape 6: Pousser l'image Docker vers Docker Hub
      - name: Push Docker image
        run: |
          set -e
          docker push imane1452/my-react-app:latest

      # Étape 7: Installer kubectl
      - name: Install kubectl
        run: |
          set -e
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mv kubectl /usr/local/bin/kubectl
          kubectl version --client  # Verify installation

      # Étape 8: Configurer kubectl avec le fichier kubeconfig
      - name: Configure kubectl
        run: |
          set -e
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 --decode > ~/.kube/config
          echo "${{ secrets.CA_CERTIFICATE }}" | base64 --decode > ~/.kube/ca.crt
          echo "${{ secrets.CLIENT_CERTIFICATE }}" | base64 --decode > ~/.kube/client.crt
          echo "${{ secrets.CLIENT_KEY }}" | base64 --decode > ~/.kube/client.key

          export KUBECONFIG=~/.kube/config
          chmod 600 ~/.kube/config

      # Étape 9: Tester la connexion au cluster
      - name: Test cluster connection
        run: |
          set -e
          echo "Checking Kubernetes cluster connection"
          kubectl config view  # View the loaded config for debugging
          kubectl get nodes  # Test if nodes are accessible

      # Étape 10: Déployer sur Kubernetes
      - name: Deploy to Kubernetes
        run: |
          set -e
          echo "Applying deployment and service files"
          kubectl apply -f k8s-deployment.yaml
          kubectl apply -f service.yaml
          kubectl rollout status deployment/my-react-app --namespace=resismart-prod --timeout=2m

      # Étape 11: Vérifier le statut du déploiement
      - name: Check deployment status
        run: |
          set -e
          echo "Checking deployment rollout status"
          kubectl rollout status deployment/my-react-app --timeout=2m

      # Étape 12:Vérifier les logs des pods Kubernetes
      - name: Get Pod Logs for Debugging
        run: |
          set -e
          kubectl logs -l app=my-react-app -n resismart-prod --tail=100  # Fetch the last 100 logs from the pods

      # Étape 13: Vérifier les événements dans Kubernetes
      - name: Check Kubernetes Events
        run: |
          set -e
          kubectl get events --namespace=resismart-prod --sort-by=.metadata.creationTimestamp  # View latest events in the namespace
