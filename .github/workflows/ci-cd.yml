name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Déclenche le pipeline lors d'un push sur la branche main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # Utilise une machine virtuelle Ubuntu

    steps:
      # Étape 1 : Checkout du code
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Installer les dépendances Node.js
      - name: Install dependencies
        run: npm install

      # Étape 3 : Build du frontend React
      - name: Build application
        run: npm run build

      # Étape 4 : Construire l'image Docker
      - name: Build Docker image
        run: docker build -t imane1452/my-react-app:latest .

      # Étape 5 : Se connecter à Docker Hub
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      # Étape 6 : Pousser l'image Docker vers Docker Hub
      - name: Push Docker image
        run: docker push imane1452/my-react-app:latest

      # Étape 7 : Configurer kubectl avec le fichier kubeconfig
      - name: Configure kubectl
        run: |
          echo "YXBpVmVyc2lvbjogdjEKY2x1c3RlcnM6Ci0gY2x1c3RlcjoKICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VSQ2FrTkRRV1UyWjBGM1NVSkJaMGxDUVZSQlRrSm5hM0ZvYTJsSE9YY3dRa0ZSYzBaQlJFRldUVkpOZDBWUldVUldVVkZFUlhkd2RHRlhOWEFLWVROV2FWcFZUa0pOUWpSWVJGUkpNVTFFU1hsT1JFRTBUbFJqZUUxc2IxaEVWRTB4VFVSSmVVMTZRVFJPVkdONFRXeHZkMFpVUlZSTlFrVkhRVEZWUlFwQmVFMUxZbGRzZFdGWGRERlpiVlpFVVZSRFEwRlRTWGRFVVZsS1MyOWFTV2gyWTA1QlVVVkNRbEZCUkdkblJWQkJSRU5EUVZGdlEyZG5SVUpCVFhsS0NsSmFSVXBsYlZaMVYyVktWRWg0Y1U1cGIzQkZNbGxLTUhNemFtMUNkbmRIV1U5RlVGUXlZMUpzYzNNNFJXWmhWWEZsYkVob1VYWjNSbEoyY1hsaWJHOEtjMUpFZEVoS1ZFMWhjVFpUYkRobFJUaEtUMjR2ZFVWRVIzSmpWRVJrZGtjd2R6TTJRM2RwS3pKVWRUUm9aMjFTUTBScU9FdFhRM0pCVG1kTWVFOWxTZ3BhWkhSV04yOTFOVzlLZUhOaFMyWTNUVGtyTkVOaE5IcFFZa1I2VGxWUFVXTk5RVEZZVFRGck9VbFRXRVF3Um10M2JFMWxTMEZyVVdOU1IwdDNkWGxLQ2tSVk9TdDFkbU5qTW1zd1duaEpOVFp6UkZkeE1uQkhWMVpuTUhwbFYzZGtOVk56VUVnNVJHSmlTaTltWW5aVVEwaHBka1p4U1hjclVWRTNhbWRDU1VFS2VtOHhaSFE1YUhWd2VGQkxOVFpSU0d3MmVVVkdkVlZYY0hWV2RsWXdTbmd4WlN0MFIzZGlPRTFFVERabmVrRXZWbmxuTlhKU05IWTJNMWxvY25GbWRnbzRTa2xETW5WTlprbHpka2N2TkRJelduTTRRMEYzUlVGQllVNW9UVVk0ZDBSbldVUldVakJRUVZGSUwwSkJVVVJCWjB0clRVSXdSMEV4VldSS1VWRlhDazFDVVVkRFEzTkhRVkZWUmtKM1RVTkNaMmR5UW1kRlJrSlJZMFJCVkVGUVFtZE9Wa2hTVFVKQlpqaEZRbFJCUkVGUlNDOU5RakJIUVRGVlpFUm5VVmNLUWtKVU9EWkdNMFZoVjFacGFrRmlNR2QwVTJORFMzWlNMMEZUWVZORVFVNUNaMnR4YUd0cFJ6bDNNRUpCVVhOR1FVRlBRMEZSUlVGeVV5dDVNVkZ0VGdwNVMxVnNlVXcyYXpSM1ltbHFNMmR2VGxWamFIWjVjV3BJVFUxU1RHNTFRbTFQV0VGeVV6a3phV05HVkdOTFpWTnFWbGczZFV0TVJEaHlMeTkwUXpkeENtRTFZWE5UYWs5VGVVUmxSMWhUZVVaWGFXb3lZbmhuT0VWWFJERXJSM0pIYUd0WldreElhVWwxY1hsTlptaFNLMk5xTlhZMVVERldaM2RtUzJGNFNHSUtjelJLWm5GdGJ6WjRWMVo1U3psc1pVRmtZVVYzZW05dWFFUjFZbmhPUjI1NmQyZ3hOU3RIZUhNMlVsQnJTbFpCYms1RmJYUlhibGRvZUhoQ1dXd3pRZ3AwTjJwb01ITnVheXRhY1V4TU1YbFNhMUF4V0VreWMxTmFNV2REUlVsRE1FbEJVMGhqVjI1eFJURXdkSHAyT1dONk1XMWpaU3RHVmpWaVVYZExWMnBwQ204MlpVUnNLMFZaVDBsTVF6aHBOVGRKSzBGRmRqQjNRWGQwU21SS1ZUZGhSbWh6V20wMUwwRklSV3czVTFZMGFWZFBWRXR5WVhGWk5tZDBPRmhSWWtJS01YUmlReTlaZGpKNWIzTkdaMUU5UFFvdExTMHRMVVZPUkNCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2c9PQogICAgZXh0ZW5zaW9uczoKICAgIC0gZXh0ZW5zaW9uOgogICAgICAgIGxhc3QtdXBkYXRlOiBUdWUsIDI1IEZlYiAyMDI1IDIwOjI3OjU3ICswMAogICAgICAgIHByb3ZpZGVyOiBtaW5pa3ViZS5zaWdzLms4cy5pbwogICAgICAgIHZlcnNpb246IHYxLjM1LjAKICAgICAgbmFtZTogY2x1c3Rlcl9pbmZvCiAgICBzZXJ2ZXI6IGh0dHBzOi8vMTkyLjE2OC40OS4yOjg0NDMKICBuYW1lOiBtaW5pa3ViZQpjb250ZXh0czoKLSBjb250ZXh0OgogICAgY2x1c3RlcjogbWluaWt1YmUKICAgIGV4dGVuc2lvbnM6CiAgICAtIGV4dGVuc2lvbjoKICAgICAgICBsYXN0LXVwZGF0ZTogVHVlLCAyNSBGZWIgMjAyNSAyMDoyNzo1NyArMDAKICAgICAgICBwcm92aWRlcjogbWluaWt1YmUuc2lncy5rOHMuaW8KICAgICAgICB2ZXJzaW9uOiB2MS4zNS4wCiAgICAgIG5hbWU6IGNvbnRleHRfaW5mbwogICAgbmFtZXNwYWNlOiBkZWZhdWx0CiAgICB1c2VyOiBtaW5pa3ViZQogIG5hbWU6IG1pbmlrdWJlCmN1cnJlbnQtY29udGV4dDogbWluaWt1YmUKa2luZDogQ29uZmlnCnByZWZlcmVuY2VzOiB7fQp1c2VyczoKLSBuYW1lOiBtaW5pa3ViZQogIHVzZXI6CiAgICBjbGllbnQtY2VydGlmaWNhdGUtZGF0YTogTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVUkpWRU5EUVdkdFowRjNTVUpCWjBsQ1FXcEJUa0puYTNGb2EybEhPWGN3UWtGUmMwWkJSRUZXVFZKTmQwVlJXVVJXVVZGRVJYZHdkR0ZYTlhBS1lUTldhVnBWVGtKTlFqUllSRlJKTVUxRVNYbE9SRUUwVGxSamVFMXNiMWhFVkVrMFRVUkplVTVVUVRST1ZHTjRUV3h2ZDAxVVJWaE5RbFZIUVRGVlJRcERhRTFQWXpOc2VtUkhWblJQYlRGb1l6TlNiR051VFhoR2FrRlZRbWRPVmtKQlRWUkVWekZ3WW0xc2NtUlhTbXhNV0ZaNldsaEpkMmRuUldsTlFUQkhDa05UY1VkVFNXSXpSRkZGUWtGUlZVRkJORWxDUkhkQmQyZG5SVXRCYjBsQ1FWRkRNek5VTjJkdUsyczFRM2REZW1ObVpHczFNR3d5VnpsMGJXMVdPREFLVDJKSVdGQXZNVVpQV1VOWmJFRnpSWEZDYVN0dFJtTmxSbVZRV2xsNmRIUm5iRzVXTWtkcVJGWkxjSGhRVUZNM09VWm5hVWgyT0hObFQySTNRblF2YWdvdlZIUnBjeXN2WmtSclEwUXpXRGh1ZFVKVVVESnRSMHB3ZFdJMk4yZDBZa1V5VG1Wa1JWRkRUMFZZVFN0VFFtUlNjMkZ1ZURKSU5VYzRkVVZqZUZoWkNsSkhkWGRXUlVGa1oxVjBSWEZqWlVKdEt6ZFVkVlJyUmtZd1RsZFNZbkpzTkZCc1RsbDFjaXRJTTJ0RldrbFlPSFF5VDBSSVdVZDZOVVZJZFdOeE9TOEtWazF2Vmt4T1NFaGFjV1ZUZFhSTVlUY3liVXRIUVZGcldqbHhSbWxDYm1sVWMwWjVNMVJYYUhKUU0yOHZSRzFhZEhkdVJXUndaMDg0Um1OamJrNUxTd3AwWm5kdFJTdFpjaTlYTlZkbWQwVlhSbTUzWlZaaVdtNVJiM0ZUSzA0ME1tOHhWVFl3WkVsTFpUZFFNRU51YzBaSU9EUklVVVJwVkVGblRVSkJRVWRxQ2xsRVFtVk5RVFJIUVRGVlpFUjNSVUl2ZDFGRlFYZEpSbTlFUVdSQ1owNVdTRk5WUlVacVFWVkNaMmR5UW1kRlJrSlJZMFJCVVZsSlMzZFpRa0pSVlVnS1FYZEpkMFJCV1VSV1VqQlVRVkZJTDBKQlNYZEJSRUZtUW1kT1ZraFRUVVZIUkVGWFowSlVPRFpHTTBWaFYxWnBha0ZpTUdkMFUyTkRTM1pTTDBGVFlRcFRSRUZPUW1kcmNXaHJhVWM1ZHpCQ1FWRnpSa0ZCVDBOQlVVVkJjbVUzTWxBeGJFNU5SVFF2UjAxaFowTlpWVzE1Y0daMk16ZHNlV2RNV1habEsyMUlDbmgyV1hodlFWWnVOMXAxVUdWbVJ6Y3diMHBTTVRaaE5XMVlaMGhtSzFsdlMzZDJkemQ1WkhSUFpVaDRha3c1V2psQ1RTc3lLMmRNTkU5UlUxRnVZMEVLVGpoeVVISnpNSGhNTlhKcE1UZFVVRzloSzJaMFZUZHFObU4wZWtGNGREaHVZVFZxT1ZOUFRGSnpXV2RSTVdoV1VTdFpOR05xZG0weFZIbDBOM28wWWdvclNtOUVhakZ5U0ZGRFowZEhlbEJTZWxwb2NUYzJOV2g1ZGk4MmJEWlhRbGRrSzFwbFVtWkhaM1JNWlcwclZraEVjR2xFUjNOdkwwUXhVRlpUT0dwbENsZHpjRlpoVHpWcFpYcFJhRkpsYjBaNmJuUnljRXBFWWxSQlpHMXlSbXBvTkdGeWRtNW9hbkpqVlZNNFpsZHdlVEJLVFdWSWJrZHdReTh3TUhCMlYwRUtRa2d2VGpGNWRFbEliM2RSVEV4YVREaDRkV28wWkRKTmRFWXJZMjFVYTFvMk5GZEpLMGREVlRrNVEwWTFSME55ZG5jOVBRb3RMUzB0TFVWT1JDQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENnPT0KICAgIGNsaWVudC1rZXktZGF0YTogTFMwdExTMUNSVWRKVGlCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRcE5TVWxGY0VGSlFrRkJTME5CVVVWQmREa3dLelJLTDNCUFVYTkJjek5JTTFwUFpFcGtiSFppV25Cc1prNUViWGd4ZWk4NVVsUnRRVzFLVVV4Q1MyZFpDblp3YUZoSWFGaHFNbGROTjJKWlNsb3haR2h2ZHpGVGNXTlVlakIxTDFKWlNXZzNMMHhJYW0wcmQySm1OQzh3TjFseVVIWXpkelZCWnpreEwwbzNaMVVLZWpsd2FHbGhZbTByZFRSTVYzaE9hbGh1VWtWQmFtaEdlbEJyWjFoVllrZHdPR1JvSzFKMlRHaElUVll5UlZKeWMwWlNRVWhaUmt4U1MyNUlaMXAyZFFvd04yczFRbEprUkZaclZ6WTFaVVExVkZkTWNTOW9PVFZDUjFOR0wweGthbWQ0TWtKeksxSkNOMjVMZG1ZeFZFdEdVM3BTZURKaGJtdHljbE15ZFRsd0NtbG9aMFZLUjJaaGFGbG5XalJyTjBKamREQXhiMkY2T1RaUWR6VnRZbU5LZUVoaFdVUjJRbGhJU25wVGFYSllPRXBvVUcxTEx6RjFWbTQ0UWtab1dqZ0tTR3hYTWxvd1MwdHJkbXBsVG5GT1ZrOTBTRk5EYm5WNk9VRndOMEpTTDA5Q01FRTBhM2RKUkVGUlFVSkJiMGxDUVVZNE1USlpZVmRMUkRWaGRsUXdkZ3BMWlRNNVpYVlJiMmQySzNCTmEzbHZRamRwZDAxVFdEQjBaWFpOTVdKMlQyeERiVEpXTXpaRU1WWTFVRGRaYTNsekwxSjRkMU5hVGtwSmJrcENLelpCQ21oR1lpc3JRMG9yV2xKWVpYQklaVFpRVms1TFdFVXJSVmxPU1c5Rk9URnpha3BLY0hkd1NqSmtRM1pEYzNWNWVIRkpXbFEzU21VNWNtZ3JUR0pxTHk4S1JUUllNRlZJTm1ZM2R6WnBWR1JEVlRsaVREQnVaRXh3YW1sR05tSk1ZV1EzZGtaUlJIWnFibmhPUWxKeWRuaGxVSGx1TURoM1RqSklPSE13TTFnME1Bb3pXbXRCWWxaSVdDdFdTa0l2YW00ek56aHVRWFJNYUVFelQyUkZOSEpHWVVkME1tRkRSREpSYTFsVFRURk9lbXR6WTNsQ2NWWkZSMjl6VW1wSlZWZExDbUZ3VEZKa1lsZFRVMDlTZFZCTlRIQTFPRUZUWm5oUlVVTkdLMUJ1YjJ0blNGRTRabWwwWTI1VFpYbGxTRmhFVWpoUVRFdFVURzFqYVVZNVVtTnpOV29LU0ROUFlsUXlhME5uV1VWQk5GQXhSRFZvZFRSeE1qRjJjMUV6V1RCaU1ISkdiMFExZFdKalJYSnFVMnM0WVU1bFUxZG1iM0ZCZUZrNWFHUnJXRzFoS3dvemFrZ3Zibk5FVUhoa1ZIbFVSbFEzT0doc2FTdDJWME5OZFdacGVGVjFaM1JHYlRWb2EweHVUa2x5VkhaQmJUQkdUM1ZhVjJkcmMwMUNTVzlCV0RCRUNtRm9PVmxtZWpNNU56aFhNbHAyTUZsSGVXYzNkbHBTYzBjMVdtYzJkSGwxZDFJeU1VeDFUbkYxZFhOdmRWRnBVazVrWkVWbFRqaERaMWxGUVRCVVZHa0tZbUYxUzFoSVMwODBhemxuWW05VGNHODFWbFk1VVV0NFZEWlFOemcxVm5ocE1GaDNhSFl6ZUc5MGRtUjNXamNyUmxKa09HVm5NelpRWmpCTVRUWm9Sd3BhV2pSUkt6aEtUbnBHVVdWS2JHVllTSGxCV2s1WFpFMUNPRXBQUlhZdmFqQlJUMjFoTmxWTVowZzBWV3haY214NmMwbG1aMGN2YzNKWmNWUlZTa1ZOQ205dFdVRjVkSFJDVkU1aGJWcDZNbllyZUVacVRqUm5aME5ZZW5GYWMzVXllbnAyVFZWek1FTm5XVVZCZGs1MFltUXphV3hzZVVOU2RFOXRUM0YxUWtRS2JuVjNPSE15ZFhobWFHMXhjWHB6WWtacWMyMTZTV3QzTURoSWJTdHRZamh4VERoSVpERmpZVVZXU1drMFdHZHJNVXRCUTNWbE5FUnJTQ3RrYkRCa1dRcGhiM015WkVWRlRXMXpiemt5V1ZjM2NVTlFjalJsZGpWTU5VUlBSRUpJU1VndmFWZzNTbU0wTlZZdmRFMUtOR0U0YUVSbWRFMDRNWGREUzBjd1FqZFhDbWRxZUZKeWFqUjJhRklyU1ZjeWJWcHRjbmhOVDJKclEyZFpRVEJ4YVRFclJXcHliMloxV1RsVWJVbHRUVVIwVFU1UFNFbHdaamRuTXpWVmFtZHlSbk1LYzBKVFYzaDNTek5VYzFsTFdXVXpkMlpXVFZkdWMwbHhURXhPVUUwNFRsVXZWeXRzUlZGeWIzSjRlRkExY1dwcFlYZEJkR3N5TVhWWWNHMXpObk5JT0FvNFowSktRazlzWVZaWFRERkxiSGRxY1c1aGJuSkpWbGRSY0ZwSVNqbDVXVmhVYkVJeEsxRmxXbU5NUzBwd2RGRm9kRmxHVDNJeGJEVm5OVlZDYlVKckNqRjBZbVV5VVV0Q1oxRkRVMW94ZWtKQlJtdG5SV0pvY0ZoYVNIVkNPSFZMYkRVcmVIUnFPR0UxT0RVeWRUTk5jbVF5YkhaVk1XSjNhV1ZuYkd4UFRrUUtWWGc1UjNocVFUWkxiMkZSVFZFMWVHZHRVMVpSVUdORFRHUlpVbGhMY2psWk5VUjRaRzh5ZWtKM1QzZzFiMDV2YTNkNlVqaGFRa3hMYjIxTWFEZGxTQXBhTmpsa1VtRmhUQzl4UTBoV1RWUTJiRFZEY2pKemVsQldTM2h1U0VObV" | base64 --decode > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml

      # Étape 8 : Déployer sur Kubernetes
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f deployment.yaml --namespace=resismart-prod
          kubectl apply -f service.yaml --namespace=resismart-prod
          kubectl rollout status deployment/my-react-app --namespace=resismart-prod --timeout=2m